buildscript {
    ext {
        lombokVersion = '1.18.16'
        jacksonVersion = '2.11.1'
        spockVersion = '1.3-groovy-2.5'
        springBootVersion = '2.4.4'
        springDepsManagement = '1.0.11.RELEASE'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '2.9.2'
    }
}
plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDepsManagement}"
    id 'groovy'

    id 'checkstyle'
    id 'jacoco'
}


group = 'pl.futurecollars.invoicing'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.85
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.85
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:
                    ['pl/futurecollars/invoicing/App.class'
                    ])
        }))
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:
                    ['pl/futurecollars/invoicing/App.class'
                    ])
        }))
    }
}
